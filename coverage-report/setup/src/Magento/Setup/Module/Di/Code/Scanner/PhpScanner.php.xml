<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="PhpScanner.php" path="/setup/src/Magento/Setup/Module/Di/Code/Scanner">
    <totals>
      <lines total="301" comments="93" code="208" executable="112" executed="0" percent="0.00"/>
      <methods count="10" tested="0" percent="0.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Magento\Setup\Module\Di\Code\Scanner\PhpScanner" start="19" executable="112" executed="0" crap="2352">
      <namespace name="Magento\Setup\Module\Di\Code\Scanner"/>
      <method name="__construct" signature="__construct(Magento\Setup\Module\Di\Compiler\Log\Log $log, Magento\Framework\Reflection\TypeProcessor $typeProcessor)" start="37" end="42" crap="6" executable="3" executed="0" coverage="0"/>
      <method name="findMissingFactories" signature="findMissingFactories($file, $classReflection, $methodName, $entityType)" start="53" end="84" crap="56" executable="20" executed="0" coverage="0"/>
      <method name="getSourceClassName" signature="getSourceClassName($missingClassName, $entityType)" start="93" end="115" crap="30" executable="15" executed="0" coverage="0"/>
      <method name="_fetchFactories" signature="_fetchFactories($reflectionClass, $file)" start="124" end="133" crap="2" executable="7" executed="0" coverage="0"/>
      <method name="_fetchMissingExtensionAttributesClasses" signature="_fetchMissingExtensionAttributesClasses($reflectionClass, $file)" start="142" end="167" crap="42" executable="17" executed="0" coverage="0"/>
      <method name="collectEntities" signature="collectEntities(array $files)" start="176" end="188" crap="12" executable="8" executed="0" coverage="0"/>
      <method name="_fetchNamespace" signature="_fetchNamespace($tokenIterator, $count, $tokens)" start="198" end="213" crap="42" executable="10" executed="0" coverage="0"/>
      <method name="fetchClass" signature="fetchClass($namespace, $tokenIterator, $count, $tokens): ?string" start="224" end="240" crap="30" executable="7" executed="0" coverage="0"/>
      <method name="getDeclaredClasses" signature="getDeclaredClasses($file): array" start="248" end="271" crap="72" executable="13" executed="0" coverage="0"/>
      <method name="shouldGenerateClass" signature="shouldGenerateClass($missingClassName, $entityType, $file)" start="281" end="299" crap="30" executable="12" executed="0" coverage="0"/>
    </class>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Copyright &#xA9; Magento, Inc. All rights reserved.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> * See COPYING.txt for license details.</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="6">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Setup\Module\Di\Code\Scanner</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9"/>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Framework\Api\Code\Generator\ExtensionAttributesGenerator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Framework\Api\Code\Generator\ExtensionAttributesInterfaceGenerator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Framework\ObjectManager\Code\Generator\Factory</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FactoryGenerator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Framework\Reflection\TypeProcessor</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Setup\Module\Di\Compiler\Log\Log</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT"> * Finds factory and extension attributes classes which require auto-generation.</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="19">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">PhpScanner</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ScannerInterface</token>
      </line>
      <line no="20">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT">     * @var Log $log</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$_log</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25"/>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     * @var TypeProcessor</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$typeProcessor</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="32">
        <token name="T_DOC_COMMENT">     * Initialize dependencies.</token>
      </line>
      <line no="33">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * @param Log $log</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     * @param TypeProcessor|null $typeProcessor</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Log</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TypeProcessor</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$typeProcessor</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_log</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$log</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">typeProcessor</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$typeProcessor</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">            </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\Magento\Framework\App\ObjectManager</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">getInstance</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">get</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">TypeProcessor</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="43"/>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     * Find classes which are used as parameters types of the specified method and are not declared.</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     * @param string $file</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     * @param \ReflectionClass $classReflection</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">     * @param string $methodName</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">     * @param string $entityType</token>
      </line>
      <line no="51">
        <token name="T_DOC_COMMENT">     * @return string[]</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findMissingFactories</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$classReflection</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$methodName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$missingClasses</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$classReflection</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasMethod</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$methodName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$missingClasses</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="59"/>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$factorySuffix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'\\'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">FactoryGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$constructor</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$classReflection</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMethod</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$methodName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$parameters</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$constructor</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getParameters</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/** @var $parameter \ReflectionParameter */</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$parameters</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$parameter</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/\[\s\&lt;\w+?&gt;\s\??([\w\\\\]+)/s'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$parameter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">__toString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$matches</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$matches</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$matches</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$matches</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">shouldGenerateClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="69"/>
      <line no="70">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$factorySuffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$factorySuffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$entityName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rtrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$factorySuffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'\\'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_log</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">add</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_STRING">Log</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONFIGURATION_ERROR</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid Factory declaration for class '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' in file '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$missingClasses</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$missingClasses</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="85"/>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     * Identify source class name for the provided class.</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="89">
        <token name="T_DOC_COMMENT">     * @param string $missingClassName</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     * @param string $entityType</token>
      </line>
      <line no="91">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="92">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getSourceClassName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rtrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'\\'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">lcfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ExtensionAttributesInterfaceGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">            </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ExtensionAttributesGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/** Process special cases for extension class and extension interface */</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Interface'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FactoryGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$extensionAttributesSuffix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ExtensionAttributesGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$extensionAttributesSuffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$extensionAttributesSuffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/** Process special case for extension factories */</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$extensionAttributesClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ExtensionAttributesGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$extensionAttributesClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Interface'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="116"/>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="118">
        <token name="T_DOC_COMMENT">     * Fetch factories from class constructor</token>
      </line>
      <line no="119">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="120">
        <token name="T_DOC_COMMENT">     * @param \ReflectionClass $reflectionClass</token>
      </line>
      <line no="121">
        <token name="T_DOC_COMMENT">     * @param string $file</token>
      </line>
      <line no="122">
        <token name="T_DOC_COMMENT">     * @return string[]</token>
      </line>
      <line no="123">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">_fetchFactories</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$absentFactories</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findMissingFactories</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'__construct'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">FactoryGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$absentFactories</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     * Find missing extension attributes related classes, interfaces and factories.</token>
      </line>
      <line no="137">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="138">
        <token name="T_DOC_COMMENT">     * @param \ReflectionClass $reflectionClass</token>
      </line>
      <line no="139">
        <token name="T_DOC_COMMENT">     * @param string $file</token>
      </line>
      <line no="140">
        <token name="T_DOC_COMMENT">     * @return string[]</token>
      </line>
      <line no="141">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">_fetchMissingExtensionAttributesClasses</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$missingExtensionInterfaces</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$methodName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'getExtensionAttributes'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\Magento\Framework\Api\Code\Generator\ExtensionAttributesInterfaceGenerator</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ENTITY_TYPE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasMethod</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$methodName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isInterface</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$returnType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">typeProcessor</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getGetterReturnType</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">                </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\Laminas\Code\Reflection\ClassReflection</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMethod</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$methodName</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$returnType</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'type'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">shouldGenerateClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$missingExtensionInterfaces</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154"/>
      <line no="155">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$extension</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rtrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Interface'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'\\'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">class_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$extension</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$missingExtensionInterfaces</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$extension</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$extensionFactory</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$extension</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Factory'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">class_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$extensionFactory</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$missingExtensionInterfaces</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$extensionFactory</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="165"/>
      <line no="166">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$missingExtensionInterfaces</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="168"/>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="170">
        <token name="T_DOC_COMMENT">     * Get array of class names</token>
      </line>
      <line no="171">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="172">
        <token name="T_DOC_COMMENT">     * @param array $files</token>
      </line>
      <line no="173">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="174">
        <token name="T_DOC_COMMENT">     * @throws \ReflectionException</token>
      </line>
      <line no="175">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">collectEntities</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$files</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$files</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$classes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDeclaredClasses</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$classes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$className</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\ReflectionClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$className</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_fetchFactories</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_fetchMissingExtensionAttributesClasses</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reflectionClass</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_unique</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">array_merge</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELLIPSIS">...</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="189"/>
      <line no="190">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="191">
        <token name="T_DOC_COMMENT">     * Fetch namespaces from tokenized PHP file</token>
      </line>
      <line no="192">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="193">
        <token name="T_DOC_COMMENT">     * @param int $tokenIterator</token>
      </line>
      <line no="194">
        <token name="T_DOC_COMMENT">     * @param int $count</token>
      </line>
      <line no="195">
        <token name="T_DOC_COMMENT">     * @param array $tokens</token>
      </line>
      <line no="196">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="197">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">_fetchNamespace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INC">++</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_NAME_QUALIFIED</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_STRING</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"\\"</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'{'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">';'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">                </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="212">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="214"/>
      <line no="215">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="216">
        <token name="T_DOC_COMMENT">     * Fetches class name from tokenized PHP file.</token>
      </line>
      <line no="217">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="218">
        <token name="T_DOC_COMMENT">     * @param string $namespace</token>
      </line>
      <line no="219">
        <token name="T_DOC_COMMENT">     * @param int $tokenIterator</token>
      </line>
      <line no="220">
        <token name="T_DOC_COMMENT">     * @param int $count</token>
      </line>
      <line no="221">
        <token name="T_DOC_COMMENT">     * @param array $tokens</token>
      </line>
      <line no="222">
        <token name="T_DOC_COMMENT">     * @return string|null</token>
      </line>
      <line no="223">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="224">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">fetchClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$namespace</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="225">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="226">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// anonymous classes should be omitted</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_NEW</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="230"/>
      <line no="231">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INC">++</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="232">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenOffset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'{'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="235"/>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"\\"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="238"/>
      <line no="239">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="240">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="241"/>
      <line no="242">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="243">
        <token name="T_DOC_COMMENT">     * Get classes and interfaces declared in the file</token>
      </line>
      <line no="244">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="245">
        <token name="T_DOC_COMMENT">     * @param string $file</token>
      </line>
      <line no="246">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="247">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="248">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getDeclaredClasses</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="249">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$classes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// phpcs:ignore</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">token_get_all</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">file_get_contents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="255"/>
      <line no="256">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOR">for</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_SEMICOLON">;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_INC">++</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="257">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_NAMESPACE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="258">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_fetchNamespace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="260"/>
      <line no="261">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_CLASS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_INTERFACE</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">                </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_EQUAL">!=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_DOUBLE_COLON</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="264">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">fetchClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">join</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenIterator</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="265">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$classes</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="266">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$classes</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="269">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="270">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$classes</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="271">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="272"/>
      <line no="273">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="274">
        <token name="T_DOC_COMMENT">     * Check if specified class is missing and if it can be generated.</token>
      </line>
      <line no="275">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="276">
        <token name="T_DOC_COMMENT">     * @param string $missingClassName</token>
      </line>
      <line no="277">
        <token name="T_DOC_COMMENT">     * @param string $entityType</token>
      </line>
      <line no="278">
        <token name="T_DOC_COMMENT">     * @param string $file</token>
      </line>
      <line no="279">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="280">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="281">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">shouldGenerateClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="283">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="284">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">class_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="285">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="286">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NAME_FULLY_QUALIFIED">\RuntimeException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COMMENT">//phpcs:ignore</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSourceClassName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="290">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">class_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">interface_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="291">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_log</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">add</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">Log</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CONFIGURATION_ERROR</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$missingClassName</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOUBLE_QUOTES">"</token>
        <token name="T_ENCAPSED_AND_WHITESPACE">Invalid </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$entityType</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> for nonexistent class </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$sourceClassName</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_ENCAPSED_AND_WHITESPACE"> in file </token>
        <token name="T_CURLY_OPEN">{</token>
        <token name="T_VARIABLE">$file</token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_DOUBLE_QUOTES">"</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="298">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="299">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="300">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="301"/>
    </source>
  </file>
</phpunit>
