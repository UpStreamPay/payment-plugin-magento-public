<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="FileClassScanner.php" path="/setup/src/Magento/Setup/Module/Di/Code/Reader">
    <totals>
      <lines total="207" comments="68" code="139" executable="70" executed="0" percent="0.00"/>
      <methods count="5" tested="0" percent="0.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Magento\Setup\Module\Di\Code\Reader\FileClassScanner" start="13" executable="70" executed="0" crap="1406">
      <namespace name="Magento\Setup\Module\Di\Code\Reader"/>
      <method name="__construct" signature="__construct($filename)" start="54" end="68" crap="12" executable="9" executed="0" coverage="0"/>
      <method name="getFileContents" signature="getFileContents()" start="75" end="79" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="getClassName" signature="getClassName(): string" start="86" end="92" crap="6" executable="3" executed="0" coverage="0"/>
      <method name="extract" signature="extract(): string" start="107" end="179" crap="650" executable="46" executed="0" coverage="0"/>
      <method name="isBracedNamespace" signature="isBracedNamespace($index)" start="187" end="205" crap="42" executable="11" executed="0" coverage="0"/>
    </class>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Copyright &#xA9; Magento, Inc. All rights reserved.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> * See COPYING.txt for license details.</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="6">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Setup\Module\Di\Code\Reader</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9"/>
      <line no="10">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> * Class FileClassScanner</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FileClassScanner</token>
      </line>
      <line no="14">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NAMESPACE_TOKENS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_WHITESPACE</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_STRING</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_NS_SEPARATOR</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// PHP 8 compatibility.</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_NAME_QUALIFIED</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_NAME_FULLY_QUALIFIED</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23"/>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ALLOWED_OPEN_BRACES_TOKENS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_CURLY_OPEN</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_DOLLAR_OPEN_CURLY_BRACES</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">T_STRING_VARNAME</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29"/>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     * The filename of the file to introspect</token>
      </line>
      <line no="32">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="33">
        <token name="T_DOC_COMMENT">     * @var string</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36"/>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     * The class name found in the file.</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT">     * @var string|bool</token>
      </line>
      <line no="41">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$className</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43"/>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokens</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="48"/>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">     * Constructor for the file class scanner.  Requires the filename</token>
      </line>
      <line no="51">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     * @param string $filename</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// phpcs:ignore</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">realpath</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// phpcs:ignore</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">file_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_NAME_FULLY_QUALIFIED">\is_file</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidFileException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'The file "%s" does not exist or is not a file'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$filename</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">filename</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$filename</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="69"/>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="71">
        <token name="T_DOC_COMMENT">     * Retrieves the contents of a file.  Mostly here for Mock injection</token>
      </line>
      <line no="72">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="74">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getFileContents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// phpcs:ignore</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">file_get_contents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">filename</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="80"/>
      <line no="81">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="82">
        <token name="T_DOC_COMMENT">     * Retrieves the first class found in a file.</token>
      </line>
      <line no="83">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="84">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="85">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getClassName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">className</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">className</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">extract</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">className</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="93"/>
      <line no="94">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="95">
        <token name="T_DOC_COMMENT">     * Extracts the fully qualified class name from a file.</token>
      </line>
      <line no="96">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="97">
        <token name="T_DOC_COMMENT">     * It only searches for the first match and stops looking as soon as it enters the class definition itself.</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     * Warnings are suppressed for this method due to a micro-optimization that only really shows up when this logic</token>
      </line>
      <line no="100">
        <token name="T_DOC_COMMENT">     * is called several millions of times, which can happen quite easily with even moderately sized codebases.</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     * @SuppressWarnings(PHPMD.CyclomaticComplexity)</token>
      </line>
      <line no="103">
        <token name="T_DOC_COMMENT">     * @SuppressWarnings(PHPMD.NPathComplexity)</token>
      </line>
      <line no="104">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="105">
        <token name="T_DOC_COMMENT">     * @return string</token>
      </line>
      <line no="106">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">extract</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$triggerClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$triggerNamespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$braceLevel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$bracedNamespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116"/>
      <line no="117">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// phpcs:ignore</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">token_get_all</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getFileContents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$tokenIsArray</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// Is either a literal brace or an interpolated brace with a variable</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'{'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tokenIsArray</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">ALLOWED_OPEN_BRACES_TOKENS</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$braceLevel</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'}'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$braceLevel</token>
        <token name="T_DEC">--</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// The namespace keyword was found in the last loop</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$triggerNamespace</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// A string ; or a discovered namespace that looks like "namespace name { }"</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$tokenIsArray</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_WHITESPACE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$triggerNamespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'\\'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="136"/>
      <line no="137">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// `class` token is not used with a valid class name</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$triggerClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$tokenIsArray</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$triggerClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// The class keyword was found in the last loop</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$triggerClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_STRING</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$triggerClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="145"/>
      <line no="146">
        <token name="T_WHITESPACE">            </token>
        <token name="T_SWITCH">switch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CASE">case</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_NAMESPACE</token>
        <token name="T_COLON">:</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT">// Current loop contains the namespace keyword. Between this and the semicolon is the namespace</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$triggerNamespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$bracedNamespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isBracedNamespace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153"/>
      <line no="154">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">// PHP 8</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CASE">case</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_NAME_QUALIFIED</token>
        <token name="T_COLON">:</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CASE">case</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_NAME_FULLY_QUALIFIED</token>
        <token name="T_COLON">:</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$triggerNamespace</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="161"/>
      <line no="162">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CASE">case</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_TRAIT</token>
        <token name="T_COLON">:</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CASE">case</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">T_CLASS</token>
        <token name="T_COLON">:</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COMMENT">// Current loop contains the class keyword. Next loop will have the class name itself.</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$braceLevel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$bracedNamespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$braceLevel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$triggerClass</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="170"/>
      <line no="171">
        <token name="T_WHITESPACE">            </token>
        <token name="T_COMMENT">// We have a class name, let's concatenate and return it!</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$fqClassName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$namespace</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'\\'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$namespaceParts</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fqClassName</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$class</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="180"/>
      <line no="181">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="182">
        <token name="T_DOC_COMMENT">     * Looks forward from the current index to determine if the namespace is nested in {} or terminated with ;</token>
      </line>
      <line no="183">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="184">
        <token name="T_DOC_COMMENT">     * @param integer $index</token>
      </line>
      <line no="185">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="186">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isBracedNamespace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="189">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$len</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_INC">++</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$len</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">';'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'{'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="199"/>
      <line no="200">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">NAMESPACE_TOKENS</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokens</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$index</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidFileException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Namespace not defined properly'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidFileException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Could not find namespace termination'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="206">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="207"/>
    </source>
  </file>
</phpunit>
