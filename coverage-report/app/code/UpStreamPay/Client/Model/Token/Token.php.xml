<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Token.php" path="/app/code/UpStreamPay/Client/Model/Token">
    <totals>
      <lines total="109" comments="49" code="60" executable="11" executed="11" percent="100.00"/>
      <methods count="9" tested="9" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="UpStreamPay\Client\Model\Token\Token" start="23" executable="11" executed="11" crap="11">
      <namespace name="UpStreamPay\Client\Model\Token"/>
      <method name="getValue" signature="getValue(): ?string" start="28" end="31" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setValue" signature="setValue(string $value): self" start="38" end="41" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getLifetime" signature="getLifetime(): int" start="46" end="49" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setLifetime" signature="setLifetime(int $lifetime): self" start="56" end="59" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getCreatedAt" signature="getCreatedAt(): ?string" start="64" end="67" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setCreatedAt" signature="setCreatedAt(string $createdAt): self" start="74" end="77" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getExpirationDate" signature="getExpirationDate(): ?string" start="82" end="85" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setExpirationDate" signature="setExpirationDate(string $expirationDate): self" start="92" end="95" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="hasExpired" signature="hasExpired(): bool" start="100" end="107" crap="3" executable="3" executed="3" coverage="100"/>
    </class>
    <coverage>
      <line nr="30">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithNoCache"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithWrongCacheData"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenValue"/>
      </line>
      <line nr="40">
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenValue"/>
      </line>
      <line nr="48">
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithNoCache"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithWrongCacheData"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenLifetime"/>
      </line>
      <line nr="58">
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenLifetime"/>
      </line>
      <line nr="66">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithNoCache"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithWrongCacheData"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenCreatedAt"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Valid token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Expired token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No creation date token&quot;"/>
      </line>
      <line nr="76">
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenCreatedAt"/>
      </line>
      <line nr="84">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithNoCache"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetTokenWithWrongCacheData"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenExpirationDate"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Valid token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Expired token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No creation date token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No expiration date token&quot;"/>
      </line>
      <line nr="94">
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenServiceTest::testSetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testTokenExpirationDate"/>
      </line>
      <line nr="102">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Valid token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Expired token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No creation date token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No expiration date token&quot;"/>
      </line>
      <line nr="103">
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No creation date token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;No expiration date token&quot;"/>
      </line>
      <line nr="106">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Valid token&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Token\TokenTest::testHasExpired with data set &quot;Expired token&quot;"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * UpStream Pay</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * Copyright (c) 2023 UpStream Pay.</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> * This file is open source and available under the BSD 3 license.</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * See the LICENSE file for more info.</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * Author: Claranet France &lt;info@fr.clara.net&gt;</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="11">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Client\Model\Token</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14"/>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Framework\DataObject</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Client\Api\Data\TokenInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT"> * Class Token</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT"> * @package UpstreamPay\Client\Model\Token</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="23">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXTENDS">extends</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DataObject</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TokenInterface</token>
      </line>
      <line no="24">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     * @return null|string</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * @param string $value</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     * @return $this</token>
      </line>
      <line no="37">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">VALUE</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="42"/>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT">     * @return int</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLifetime</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LIFETIME</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="50"/>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     * @param int $lifetime</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     * @return $this</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setLifetime</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lifetime</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LIFETIME</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lifetime</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="60"/>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="62">
        <token name="T_DOC_COMMENT">     * @return null|string</token>
      </line>
      <line no="63">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getCreatedAt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CREATED_AT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="68"/>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     * @param string $createdAt</token>
      </line>
      <line no="71">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="72">
        <token name="T_DOC_COMMENT">     * @return $this</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setCreatedAt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$createdAt</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CREATED_AT</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$createdAt</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="80">
        <token name="T_DOC_COMMENT">     * @return null|string</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getExpirationDate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EXPIRATION_DATE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="86"/>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     * @param string $expirationDate</token>
      </line>
      <line no="89">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     * @return $this</token>
      </line>
      <line no="91">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setExpirationDate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expirationDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EXPIRATION_DATE</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expirationDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hasExpired</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getExpirationDate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCreatedAt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="105"/>
      <line no="106">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getExpirationDate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCreatedAt</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="108">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="109"/>
    </source>
  </file>
</phpunit>
