<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Client.php" path="/app/code/UpStreamPay/Client/Model/Client">
    <totals>
      <lines total="469" comments="142" code="327" executable="191" executed="190" percent="99.48"/>
      <methods count="10" tested="9" percent="90.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="UpStreamPay\Client\Model\Client\Client" start="32" executable="191" executed="190" crap="30">
      <namespace name="UpStreamPay\Client\Model\Client"/>
      <method name="__construct" signature="__construct(GuzzleHttp\ClientFactory $httpClientFactory, UpStreamPay\Core\Model\Config $config, UpStreamPay\Client\Model\Token\TokenService $tokenService, Magento\Framework\Event\ManagerInterface $eventManager, Psr\Log\LoggerInterface $logger)" start="56" end="62" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getToken" signature="getToken(): array" start="71" end="91" crap="2" executable="14" executed="14" coverage="100"/>
      <method name="createSession" signature="createSession(array $orderSession): array" start="102" end="123" crap="2" executable="17" executed="17" coverage="100"/>
      <method name="createWalletSession" signature="createWalletSession(int $customerId): array" start="134" end="162" crap="2" executable="21" executed="21" coverage="100"/>
      <method name="getAllTransactionsForSession" signature="getAllTransactionsForSession(string $sessionId): array" start="175" end="215" crap="5" executable="27" executed="27" coverage="100"/>
      <method name="capture" signature="capture(string $transactionId, array $body): array" start="236" end="267" crap="2" executable="23" executed="23" coverage="100"/>
      <method name="void" signature="void(string $transactionId, array $body): array" start="289" end="319" crap="4" executable="19" executed="19" coverage="100"/>
      <method name="refund" signature="refund(string $transactionId, array $body): array" start="341" end="387" crap="4" executable="32" executed="32" coverage="100"/>
      <method name="callApi" signature="callApi(array $headers, array $body, string $protocol, string $uri, array $query): array" start="402" end="445" crap="6" executable="29" executed="29" coverage="100"/>
      <method name="buildHeader" signature="buildHeader(): array" start="454" end="467" crap="2.01" executable="8" executed="7" coverage="87.5"/>
    </class>
    <coverage>
      <line nr="62">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="73">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="74">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="77">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="78">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="79">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="80">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="82">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="83">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="86">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="90">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="104">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="105">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="108">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="109">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="110">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="112">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="113">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="115">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="116">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="118">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="119">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="122">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="136">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="137">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="140">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="141">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="143">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="145">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="146">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="147">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="149">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="150">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="151">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="153">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="154">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="156">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="157">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="161">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="177">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="178">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="179">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="180">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="185">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="186">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="189">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="190">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="191">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="193">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
      </line>
      <line nr="194">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
      </line>
      <line nr="196">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="197">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="198">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="201">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="202">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="205">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="207">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="208">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="210">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="212">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="238">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="239">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="242">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="243">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="245">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="246">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="250">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="251">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="252">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="253">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="255">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="258">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="260">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="261">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="262">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="263">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="266">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="291">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="292">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="295">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="296">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="297">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="298">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="300">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="304">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="305">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="306">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="307">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="308">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="311">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="314">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="316">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="343">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="344">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="347">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="348">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="350">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="351">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="355">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="356">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="357">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="358">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="360">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="364">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="366">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
      </line>
      <line nr="367">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
      </line>
      <line nr="368">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
      </line>
      <line nr="369">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
      </line>
      <line nr="372">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
      </line>
      <line nr="373">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="374">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="375">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="376">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="379">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="382">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="384">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="404">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="405">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="406">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="407">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="408">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="409">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="410">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="414">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="417">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="422">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="423">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="424">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="428">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="429">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="432">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="433">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="435">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="436">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="437">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="438">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="439">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="440">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="444">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="456">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="458">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="463">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="464">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="465">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="81">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="84">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="87">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="88">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
      </line>
      <line nr="111">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="114">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="117">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="120">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="121">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
      </line>
      <line nr="148">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="152">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="155">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="158">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="159">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
      </line>
      <line nr="181">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="182">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="195">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
      </line>
      <line nr="199">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="200">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="209">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="244">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="247">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="248">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="254">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="256">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="264">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="299">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="301">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="309">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="310">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="349">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="352">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="353">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="359">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="361">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
      </line>
      <line nr="370">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
      </line>
      <line nr="377">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="378">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
      </line>
      <line nr="415">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="416">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="418">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="419">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="420">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="425">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetToken"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="462">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
      <line nr="466">
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefund"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testRefundException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCreateWalletSession"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionSuccess"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;No order found exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testGetAllTransactionsForSessionException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoid"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Conflict exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testVoidException with data set &quot;Generic exception&quot;"/>
        <covered by="UpStreamPay\Client\Test\Model\Client\ClientTest::testCapture"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * UpStream Pay</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * Copyright (c) 2023 UpStream Pay.</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> * This file is open source and available under the BSD 3 license.</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * See the LICENSE file for more info.</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * Author: Claranet France &lt;info@fr.clara.net&gt;</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="11">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Client\Model\Client</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14"/>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">GuzzleHttp\Exception\GuzzleException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">GuzzleHttp\RequestOptions</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Log\LoggerInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Client\Exception\NoSessionFoundException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Client\Model\Token\TokenService</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Core\Exception\ConflictRetrieveTransactionsException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Core\Model\Config</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">GuzzleHttp\ClientFactory</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Magento\Framework\Event\ManagerInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">EventManager</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">UpStreamPay\Core\Model\Config\Source\Debug</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26"/>
      <line no="27">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT"> * Class Client</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT"> * @package UpStreamPay\Client\Model\Client</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="32">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Client</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ClientInterface</token>
      </line>
      <line no="33">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">HEADERS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'headers'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">API_KEY_PARAM</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'x-api-key'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QUERY</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'query'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">POST</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'POST'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">GET</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'GET'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">OAUTH_TOKEN_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/oauth/token'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">CREATE_SESSION_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/sessions/create'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">CREATE_WALLET_SESSION_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/wallet/session'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SESSION_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/sessions/'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TRANSACTIONS_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/transactions/'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">CAPTURE_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/capture'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">VOID_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/void'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">REFUND_URI</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/refund'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">API_URI_SKELETON</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'%s%s%s%s'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="48"/>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">     * @param ClientFactory $httpClientFactory</token>
      </line>
      <line no="51">
        <token name="T_DOC_COMMENT">     * @param Config $config</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     * @param TokenService $tokenService</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     * @param EventManager $eventManager</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     * @param LoggerInterface $logger</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_READONLY">readonly</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ClientFactory</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$httpClientFactory</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_READONLY">readonly</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Config</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$config</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_READONLY">readonly</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TokenService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tokenService</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_READONLY">readonly</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">EventManager</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eventManager</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_READONLY">readonly</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LoggerInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logger</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63"/>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="65">
        <token name="T_DOC_COMMENT">     * Get token to authenticate on further API calls.</token>
      </line>
      <line no="66">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="67">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="68">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="69">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--GET TOKEN--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Authorization'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Basic %s'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">base64_encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getClientId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">':'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getClientSecret</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">API_KEY_PARAM</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getApiKey</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Content-Type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'application/x-www-form-urlencoded'</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85"/>
      <line no="86">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'grant_type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'client_credentials'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89"/>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">POST</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">OAUTH_TOKEN_URI</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="92"/>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="94">
        <token name="T_DOC_COMMENT">     * Create UpStream Pay session.</token>
      </line>
      <line no="95">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="96">
        <token name="T_DOC_COMMENT">     * @param array $orderSession</token>
      </line>
      <line no="97">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="100">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createSession</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$orderSession</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--CREATE SESSION--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="107"/>
      <line no="108">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'payment_usp_before_session'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'orderSession'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$orderSession</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$orderSession</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">POST</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEntityId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CREATE_SESSION_URI</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'payment_usp_after_session'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'orderSession'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$orderSession</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'apiResponse'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$apiResponse</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="122">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="124"/>
      <line no="125">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="126">
        <token name="T_DOC_COMMENT">     * Create UpStream Pay wallet session.</token>
      </line>
      <line no="127">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="128">
        <token name="T_DOC_COMMENT">     * @param int $customerId</token>
      </line>
      <line no="129">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="130">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="131">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="132">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="133">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createWalletSession</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$customerId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--CREATE WALLET SESSION--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="139"/>
      <line no="140">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'owner_reference'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$customerId</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">//When creating a wallet session we have to pass an extra parameter.</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'x-merchant-id'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMerchantId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="144"/>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'payment_usp_before_wallet_session'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'customerId'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$customerId</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">POST</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CREATE_WALLET_SESSION_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'payment_usp_after_wallet_session'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'customerId'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$customerId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'apiResponse'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$apiResponse</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="160"/>
      <line no="161">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163"/>
      <line no="164">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="165">
        <token name="T_DOC_COMMENT">     * Get each transaction made for a session.</token>
      </line>
      <line no="166">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="167">
        <token name="T_DOC_COMMENT">     * @param string $sessionId</token>
      </line>
      <line no="168">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="169">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="170">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="171">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="172">
        <token name="T_DOC_COMMENT">     * @throws NoSessionFoundException</token>
      </line>
      <line no="173">
        <token name="T_DOC_COMMENT">     * @throws ConflictRetrieveTransactionsException</token>
      </line>
      <line no="174">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getAllTransactionsForSession</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sessionId</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'%s%s%s'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEntityId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">SESSION_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sessionId</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183"/>
      <line no="184">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--GET ALL TRANSACTIONS FOR SESSION--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="188"/>
      <line no="189">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">GET</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">GuzzleException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">404</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">//We most likely have no order found on UpStream Pay side.</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">NoSessionFoundException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'There was a 404 error while trying to retrieve transactions for session '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sessionId</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">409</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Impossible to process upstream pay session with id %s. Please refund it in UpStream Pay BO'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$sessionId</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">critical</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">critical</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exception'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getTraceAsString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="203"/>
      <line no="204">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">//This happens sometimes in case of a conflict, we can't even retrieve the transactions from upstream.</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConflictRetrieveTransactionsException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">critical</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Error while trying to retrieve all transactions for the session '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sessionId</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">critical</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'exception'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getTraceAsString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="211"/>
      <line no="212">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="216"/>
      <line no="217">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="218">
        <token name="T_DOC_COMMENT">     * Capture the given transaction through transaction ID &amp; body parameters.</token>
      </line>
      <line no="219">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="220">
        <token name="T_DOC_COMMENT">     * The body contains the amount to capture:</token>
      </line>
      <line no="221">
        <token name="T_DOC_COMMENT">     * {</token>
      </line>
      <line no="222">
        <token name="T_DOC_COMMENT">     *      "order": {</token>
      </line>
      <line no="223">
        <token name="T_DOC_COMMENT">     *          "amount": 271.92,</token>
      </line>
      <line no="224">
        <token name="T_DOC_COMMENT">     *          "currency_code": "EUR"</token>
      </line>
      <line no="225">
        <token name="T_DOC_COMMENT">     *      },</token>
      </line>
      <line no="226">
        <token name="T_DOC_COMMENT">     *      "amount": 270.92</token>
      </line>
      <line no="227">
        <token name="T_DOC_COMMENT">     * }</token>
      </line>
      <line no="228">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="229">
        <token name="T_DOC_COMMENT">     * @param string $transactionId</token>
      </line>
      <line no="230">
        <token name="T_DOC_COMMENT">     * @param array $body</token>
      </line>
      <line no="231">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="232">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="233">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="234">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="235">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="236">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">capture</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="238">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--CAPTURE TRANSACTION--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="240">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="241"/>
      <line no="242">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sales_order_usp_before_capture'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="245">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'transactionId'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="246">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'body'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
      </line>
      <line no="247">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="248">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="249"/>
      <line no="250">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">API_URI_SKELETON</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEntityId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">TRANSACTIONS_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">CAPTURE_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="256">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="257"/>
      <line no="258">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$captureResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">POST</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="259"/>
      <line no="260">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sales_order_usp_after_capture'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'transactionId'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'body'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'captureResponse'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$captureResponse</token>
      </line>
      <line no="264">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="265"/>
      <line no="266">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$captureResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="268"/>
      <line no="269">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="270">
        <token name="T_DOC_COMMENT">     * Void the given transaction through transaction ID &amp; body parameters.</token>
      </line>
      <line no="271">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="272">
        <token name="T_DOC_COMMENT">     * The body contains the amount to void:</token>
      </line>
      <line no="273">
        <token name="T_DOC_COMMENT">     * {</token>
      </line>
      <line no="274">
        <token name="T_DOC_COMMENT">     *      "order": {</token>
      </line>
      <line no="275">
        <token name="T_DOC_COMMENT">     *          "amount": 271.92,</token>
      </line>
      <line no="276">
        <token name="T_DOC_COMMENT">     *          "currency_code": "EUR"</token>
      </line>
      <line no="277">
        <token name="T_DOC_COMMENT">     *      },</token>
      </line>
      <line no="278">
        <token name="T_DOC_COMMENT">     *      "amount": 270.92</token>
      </line>
      <line no="279">
        <token name="T_DOC_COMMENT">     * }</token>
      </line>
      <line no="280">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="281">
        <token name="T_DOC_COMMENT">     * @param string $transactionId</token>
      </line>
      <line no="282">
        <token name="T_DOC_COMMENT">     * @param array $body</token>
      </line>
      <line no="283">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="284">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="285">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="286">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="287">
        <token name="T_DOC_COMMENT">     * @throws ConflictRetrieveTransactionsException</token>
      </line>
      <line no="288">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="290">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="291">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--VOID TRANSACTION--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="294"/>
      <line no="295">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">API_URI_SKELETON</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEntityId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="298">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">TRANSACTIONS_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="299">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="300">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">VOID_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="301">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="302"/>
      <line no="303">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">POST</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">GuzzleException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="306">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">409</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="307">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Impossible to process upstream pay transaction with id %s. Please void it in UpStream Pay BO'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$transactionId</token>
      </line>
      <line no="310">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="311">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">critical</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="312"/>
      <line no="313">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">//This happens sometimes in case of a conflict, we can't even retrieve the transactions from upstream.</token>
      </line>
      <line no="314">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConflictRetrieveTransactionsException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="315">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="316">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="318">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="319">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="320"/>
      <line no="321">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="322">
        <token name="T_DOC_COMMENT">     * Refund the given transaction through transaction ID &amp; body parameters.</token>
      </line>
      <line no="323">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="324">
        <token name="T_DOC_COMMENT">     * The body contains the amount to refund:</token>
      </line>
      <line no="325">
        <token name="T_DOC_COMMENT">     * {</token>
      </line>
      <line no="326">
        <token name="T_DOC_COMMENT">     *      "order": {</token>
      </line>
      <line no="327">
        <token name="T_DOC_COMMENT">     *          "amount": 271.92,</token>
      </line>
      <line no="328">
        <token name="T_DOC_COMMENT">     *          "currency_code": "EUR"</token>
      </line>
      <line no="329">
        <token name="T_DOC_COMMENT">     *      },</token>
      </line>
      <line no="330">
        <token name="T_DOC_COMMENT">     *      "amount": 270.92</token>
      </line>
      <line no="331">
        <token name="T_DOC_COMMENT">     * }</token>
      </line>
      <line no="332">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="333">
        <token name="T_DOC_COMMENT">     * @param string $transactionId</token>
      </line>
      <line no="334">
        <token name="T_DOC_COMMENT">     * @param array $body</token>
      </line>
      <line no="335">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="336">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="337">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="338">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="339">
        <token name="T_DOC_COMMENT">     * @throws ConflictRetrieveTransactionsException</token>
      </line>
      <line no="340">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="341">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">refund</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="342">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="343">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="344">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--REFUND TRANSACTION--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="345">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="346"/>
      <line no="347">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="348">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sales_order_usp_before_refund'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="349">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'transactionId'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="351">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'body'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
      </line>
      <line no="352">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="353">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="354"/>
      <line no="355">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">API_URI_SKELETON</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="357">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getEntityId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="358">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">TRANSACTIONS_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="359">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="360">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">REFUND_URI</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="361">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="362"/>
      <line no="363">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="364">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$refundResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">POST</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="365"/>
      <line no="366">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventManager</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">dispatch</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sales_order_usp_after_refund'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'transactionId'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$transactionId</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="368">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'body'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="369">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'refundResponse'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$refundResponse</token>
      </line>
      <line no="370">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="371"/>
      <line no="372">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$refundResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="373">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">GuzzleException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="374">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">409</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="375">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="376">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Impossible to process upstream pay transaction with id %s. Please refund it in UpStream Pay BO'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="377">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$transactionId</token>
      </line>
      <line no="378">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="379">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">critical</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="380"/>
      <line no="381">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COMMENT">//This happens sometimes in case of a conflict, we can't even retrieve the transactions from upstream.</token>
      </line>
      <line no="382">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConflictRetrieveTransactionsException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="383">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="384">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="385">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="386">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="387">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="388"/>
      <line no="389">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="390">
        <token name="T_DOC_COMMENT">     * Call the API to perform a request.</token>
      </line>
      <line no="391">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="392">
        <token name="T_DOC_COMMENT">     * @param array $headers</token>
      </line>
      <line no="393">
        <token name="T_DOC_COMMENT">     * @param array $body</token>
      </line>
      <line no="394">
        <token name="T_DOC_COMMENT">     * @param string $protocol</token>
      </line>
      <line no="395">
        <token name="T_DOC_COMMENT">     * @param string $uri</token>
      </line>
      <line no="396">
        <token name="T_DOC_COMMENT">     * @param array $query</token>
      </line>
      <line no="397">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="398">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="399">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="400">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="401">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="402">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">callApi</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$protocol</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="403">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="404">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$debugMode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDebugMode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="405">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$debugMode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="406">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--REQUEST URI--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="407">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="408">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="409">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--REQUEST BODY--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="410">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">print_r</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="411">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="412">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="413"/>
      <line no="414">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$client</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">httpClientFactory</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">create</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="415">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="416">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'config'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="417">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'base_uri'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getModeUrl</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="418">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="419">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="420">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="421"/>
      <line no="422">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$options</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="423">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">HEADERS</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$headers</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="424">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">QUERY</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="425">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="426"/>
      <line no="427">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">//Don't pass the body if there is nothing to pass, or it will create an error.</token>
      </line>
      <line no="428">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="429">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$options</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">RequestOptions</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">JSON</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$body</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="430">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="431"/>
      <line no="432">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$rawResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$client</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">request</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$protocol</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$options</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="433">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">json_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$rawResponse</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getContents</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">512</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JSON_THROW_ON_ERROR</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="434"/>
      <line no="435">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$debugMode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Debug</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">DEBUG_VALUE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="436">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--RESPONSE URI--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="437">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$uri</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="438">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$rawResponse</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getBody</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="439">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'--RESPONSE BODY--'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="440">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">debug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">print_r</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="441">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="442">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="443"/>
      <line no="444">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$apiResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="445">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="446"/>
      <line no="447">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="448">
        <token name="T_DOC_COMMENT">     * Build header for API request.</token>
      </line>
      <line no="449">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="450">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="451">
        <token name="T_DOC_COMMENT">     * @throws GuzzleException</token>
      </line>
      <line no="452">
        <token name="T_DOC_COMMENT">     * @throws JsonException</token>
      </line>
      <line no="453">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="454">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="455">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="456">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokenService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="457"/>
      <line no="458">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasExpired</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="459">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tokenService</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getToken</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="460">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="461"/>
      <line no="462">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="463">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Authorization'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Bearer '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$token</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="464">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">API_KEY_PARAM</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">config</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getApiKey</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="465">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Content-Type'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'application/json'</token>
      </line>
      <line no="466">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="467">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="468">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="469"/>
    </source>
  </file>
</phpunit>
